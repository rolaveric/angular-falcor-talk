## Stage 1 - Angular without $evalAsync

## Stage 2 - Add $evalAsync

  constructor($scope) {
    this.$scope = $scope;

MyController.$inject = ['$scope'];

## Stage 3 - Request from view

import falcor from './angularFalcor.js';

  constructor($scope, falcor) {
    this.$scope = $scope;
    this.falcor = falcor;

MyController.$inject = ['$scope', 'falcor'];

<div>
  <h3>Todos: {{ctrl.todos.length}}</h3>
  <ul>
    <li ng-repeat="index in ctrl.model.getViewValue(['todos', 'length']) | pageRange">
      <span>{{:: index + 1}}: </span>
      <input type="checkbox"/>
      {{:: ctrl.model.getViewValue(['todos', index, 'name'])}}
    </li>
  </ul>
</div>

## Stage 4 - Getter/Setter

<input type="checkbox" ng-model="ctrl.model.viewGetterSetter(['todos', index, 'done'])" ng-model-options="{ getterSetter: true }"/>

## Stage 5 - Call

  /**
   * Creates a new todos item, setting it in the Falcor model and then retrieving the updated data.
   */
  addTodo() {
    if (this.newName) {
      // todos.add(name, done)
      this.model.call(['todos', 'add'], [{name: this.newName, done: false}])
        .subscribe(_ => this.$scope.$evalAsync());
      this.newName = '';
    }
  }

<div>
  <label>New Item:</label>
  <input type="text" ng-model="ctrl.newName"/>
  <button type="button" ng-click="ctrl.addTodo()">Add</button>
</div>